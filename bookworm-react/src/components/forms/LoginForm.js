import React, {Component} from 'react';import {Form, Button, Alert, FormGroup, FormLabel, FormControl} from 'react-bootstrap';import Validator from 'validator';import InlineError from '../messages/InlineError';import PropTypes from 'prop-types';class LoginForm extends Component {	state = {		data: {			email:'',			password:''		},		loading: false,		errors: {}	};	onChange = (e) => {		this.setState({			data: { ...this.state.data, [e.target.name]: e.target.value}		});  }    onSubmit = (e) => {      e.preventDefault();      const errors = this.validate(this.state.data);      this.setState({errors});      if(Object.keys(errors).length === 0){        this.setState({ loading:true })        this.props          .submit(this.state.data)          .catch(err => this.setState({ errors: err.response.data.errors, loading:false}));      }    }    validate = data => {      let errors = {};      if (!Validator.isEmail(data.email)) errors.email = "Invalid email";      if(!data.password) errors.password = "can't be blank";      return errors;    }	render(){		const {data,errors,loading} = this.state;		return(			<Form onSubmit= {this.onSubmit} loading= {loading}>        { !!errors.global && (          <Alert variant="danger">           < Alert.Heading >Something went wrong</ Alert.Heading>           <p>{errors.global}</p>          </ Alert >        )}        <FormGroup controlId="email">          <FormLabel>Email</FormLabel>          <FormControl            type="email"            name="email"            placeholder="example@example.com"            value={data.email}            onChange={this.onChange}            isInvalid={!!errors.email}          />          {errors.email && <InlineError text={errors.email} />}        </FormGroup>        <FormGroup controlId="password">          <FormLabel>Password</FormLabel>          <FormControl            type="password"            name="password"            placeholder="Make it secure"            value={data.password}            onChange={this.onChange}            isInvalid={!!errors.password}          />          {errors.password && <InlineError text={errors.password  } />}        </FormGroup>                				<Button primary type="submit"> Login </Button>			</Form>		);	};}LoginForm.propTypes = {  submit: PropTypes.func.isRequired}export default LoginForm;